#!/usr/bin/env bash
set -eou pipefail

dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../" && pwd )" && cd "$dir"
app="$(basename $dir)"

# db
  #-e db_uri="$(echo $db_uri)" \
  #-e db_uri="$(echo 'postgres://postgres@192.168.99.100:5432/postgres')" \

run_container(){
  local tag="$1"

  docker run -it --rm \
    --name="$(echo $app)" \
    -e db_uri="$(echo $db_uri)" \
    -e aws_access_key_id="$(cat ~/.aws/credentials | grep -A 2 skilbjo-robot | grep aws_access_key_id | awk '{print $3}')" \
    -e aws_secret_access_key="$(cat ~/.aws/credentials | grep -A 2 skilbjo-robot | grep aws_secret_access_key | awk '{print $3}')" \
    -e _email="$(echo $email)" \
    -e email_pw="$(echo $email_pw)" \
    -e michie="$(echo $michie)" \
    -e healthchecks_io_iris="$(echo $healthchecks_io_iris)" \
    "${app}:${tag}" bash
}

run_minicon(){
  local tag="debian-minicon"

  docker run -it --rm \
    --name="$(echo $app)" \
    -e aws_access_key_id="$(cat ~/.aws/credentials | grep -A 2 skilbjo-robot | grep aws_access_key_id | awk '{print $3}')" \
    -e aws_secret_access_key="$(cat ~/.aws/credentials | grep -A 2 skilbjo-robot | grep aws_secret_access_key | awk '{print $3}')" \
    -e _email="$(echo $email)" \
    -e email_pw="$(echo $email_pw)" \
    -e healthchecks_io_iris="$(echo $healthchecks_io_iris)" \
    "quay.io/skilbjo/iris:${tag}" bash
}

run_minidock(){
  local tag='debian-minicon-dev'

  if [[ $(cat /etc/os-release | grep 'Linux') == 'Linux' ]] && [[ -f /etc/os-release ]]; then
    source "./util"
    get_udocker
  else
    echo 'Not running in Linux. Try again inside a Debian VM.' 2>&1 && exit 1
  fi

  /tmp/udocker pull "${app}:${tag}"
  /tmp/udocker create --name="$app" "${app}:${tag}"
  /tmp/udocker setup --execmode=F1 "$app"

  /tmp/udocker run --nosysdirs \
    -v /dev -v /proc -v /etc/hosts \
    --env="_email=${email}" \
    --env="email_pw=${email_pw}" \
    --env="aws_access_key_id=${aws_access_key_id}" \
    --env="aws_secret_access_key=${aws_secret_access_key}" \
    _ /bin/bash -c '/usr/local/deploy/bin/run-job'
}

run_container 'dev'
run_container 'debian-dev'
run_minicon 'debian-minicon'

# this can only be run on a Linux machine
#run_container 'arm-dev'
#run_minidock
