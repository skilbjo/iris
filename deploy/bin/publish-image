#!/usr/bin/env bash
set -eou pipefail

publish_x86() {
  if [[ -f Dockerfile ]]; then rm Dockerfile; fi
  if [[ -d target     ]]; then rm -rf target; fi

  cat deploy/default/publish-image | \
    sed "s/tag='latest'/tag='x86'/g" | \
    sed 's/$image:$CIRCLE_SHA1/$image:$CIRCLE_SHA1-x86/g' | \
    sed 's/tag="${CIRCLE_BRANCH}_${CIRCLE_BUILD_NUM}"/tag="${CIRCLE_BRANCH}_${CIRCLE_BUILD_NUM}_x86"/g' \
    >>deploy/bin/publish-x86

  chmod u+x deploy/bin/publish-x86 && \
    deploy/bin/publish-x86
}

publish_x86_debian() {
  if [[ -f Dockerfile ]]; then rm Dockerfile; fi
  if [[ -d target     ]]; then rm -rf target; fi

  cat deploy/default/publish-image | \
    sed "s/cat '.\/deploy\/default\/Dockerfile'/cat '.\/deploy\/default\/Dockerfile.debian'/g" | \
    sed "s/tag='latest'/tag='x86-debian'/g" | \
    sed 's/$image:$CIRCLE_SHA1/$image:$CIRCLE_SHA1-x86-debian/g' | \
    sed 's/tag="${CIRCLE_BRANCH}_${CIRCLE_BUILD_NUM}"/tag="${CIRCLE_BRANCH}_${CIRCLE_BUILD_NUM}_x86-debian"/g' \
    >>deploy/bin/publish-x86-debian

  chmod u+x deploy/bin/publish-x86-debian && \
    deploy/bin/publish-x86-debian
}

build_minidocker_image() {
  local app=$(basename $(pwd))
  local image="quay.io/skilbjo/${app}"
  local x86_tag=''
  local tag=''
  if [[ $CIRCLE_BRANCH == master ]]; then
    x86_tag='x86-debian'
    tag='minicon'
  else
    x86_tag="${CIRCLE_BRANCH}_${CIRCLE_BUILD_NUM}_x86-debian"
    tag="${CIRCLE_BRANCH}_${CIRCLE_BUILD_NUM}_minicon"
  fi

  minidock \
    -i $image:$x86_tag -t $image:$tag --apt \
    --include '/usr/local/resources/*' \
    --include '/usr/local/lib/python2.7/dist-packages/*' \
    --include '/usr/lib/python2.7/*' \
    --include '/usr/lib/python3.5/*' \
    -E bash -E aws -E jq -E cat -E mkdir -E date -E touch -E sed -E tr -E base64 -E sleep -E grep -E uname \
    -E '/usr/local/deploy/bin/run-job' -E '/usr/local/src/iris' -E '/usr/local/src/athena' -E '/usr/local/src/util' \
    -- /usr/local/deploy/bin/run-job

  docker login -u $QUAY_ROBOT_USERNAME -p $QUAY_ROBOT_PASSWORD 'quay.io'
  docker tag $image:$tag $image:$CIRCLE_SHA1
  docker push $image
}

publish_arm() {
  if [[ -f Dockerfile ]]; then rm Dockerfile; fi
  if [[ -d target     ]]; then rm -rf target; fi

  cat deploy/default/publish-image | \
    sed "s/cat '.\/deploy\/default\/Dockerfile'/cat '.\/deploy\/default\/Dockerfile.arm'/g" | \
    sed "s/tag='latest'/tag='arm'/g" | \
    sed 's/$image:$CIRCLE_SHA1/$image:$CIRCLE_SHA1-arm/g' | \
    sed 's/tag="${CIRCLE_BRANCH}_${CIRCLE_BUILD_NUM}"/tag="${CIRCLE_BRANCH}_${CIRCLE_BUILD_NUM}_arm"/g' \
    >>deploy/bin/publish-arm

  chmod u+x deploy/bin/publish-arm && \
    deploy/bin/publish-arm
}

publish_x86 && \
  publish_x86_debian && \
  build_minidocker_image

publish_arm
